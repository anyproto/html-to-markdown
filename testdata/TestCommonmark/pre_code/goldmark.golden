<p><code>last_30_days</code></p>
<p><code>with backtick (`)</code></p>
<p><code>with backtick (``)</code></p>
<p><code>here are three ``` here are four ```` here is one ` that's it</code></p>
<p><code>`starting &amp; ending with a backtick`</code></p>
<p>Who ate the most donuts this week?</p>
<pre><code class="language-foo+bar">Jeff  15
Sam   11
Robin  6
</code></pre>
<pre><code>// Fprint formats using the default formats for its operands and writes to w.
// Spaces are added between operands when neither is a string.
// It returns the number of bytes written and any write error encountered.
func Fprint(w io.Writer, a ...interface{}) (n int, err error) {
</code></pre>
<p>When <code>x = 3</code>, that means <code>x + 2 = 5</code></p>
<p>The <code>&lt;img&gt;</code> tag is used to embed an image.</p>
<p>The `` tag is used to embed an image.</p>
<p>Two variables <code>A</code> <code>B</code></p>
<p>CSS: <code>body { color: yellow; font-size: 16px; }</code></p>
<p>CSS: <code>body { color: yellow; font-size: 16px; }</code></p>
<pre><code>```
</code></pre>
<pre><code>~~~
</code></pre>
<pre><code>
Some ~~~
totally ~~~~~~ normal
~ code

</code></pre>
<pre><code>
The &lt;img&gt; tag is used to embed an image.

The  tag is used to embed an image.

</code></pre>
<pre><code>

        One
        Two
        Three


</code></pre>
<pre><code>


</code></pre>
<p>We can do this like so:</p>
<pre><code class="language-js">window.location.pathname.split(&quot;/&quot;);
// [&quot;&quot;, &quot;blog&quot;, &quot;javascript&quot;, &quot;how-to-get-the-last-segment-of-a-url-in-javascript&quot;, &quot;&quot;]
</code></pre>
<hr>
<pre><code class="language-js">function fn() {
    x = 1;
    return x;
    // eslint-disable-next-line no-unreachable
    x = 3;
}
</code></pre>
<hr>
<pre><code>&lt;p&gt;&lt;span&gt;Some text&lt;/span&gt;&lt;/p&gt;

</code></pre>
<p>Copy to Clipboard</p>
<hr>
<h4>HTML:</h4>
<pre><code>&lt;p&gt;Using CSS to change the font color is easy.&lt;/p&gt;
&lt;pre&gt;
body {
color: red;
}
&lt;/pre&gt;

</code></pre>
<p>Copy to Clipboard</p>
<hr>
<pre><code class="language-md">---
title: &quot;Hello! This is the markdown file&quot;
date: 2021-09-25
tags: [&quot;react&quot;]
---

Content of the post goes here.

![Image with alt text](./image.png)
</code></pre>
<hr>
<pre><code class="language-markup">&lt;code class=&quot;language-css&quot;&gt;p { color: red }&lt;/code&gt;
</code></pre>
<hr>
<p>The function <code>selectAll()</code> highlights all the text in the
input field so the user can, for example, copy or delete the text.</p>
<p>The <strong><code>&lt;pre&gt;</code></strong> <a href="http://example.com/en-US/docs/Web/HTML">HTML</a> element represents preformatted text.</p>
<hr>
<pre><code>
This is the content:
_code_
_pre_
Cool!

</code></pre>
<hr>
<p>A simple equation: x = y + 2</p>
<p>When the process is complete, the utility will output the text
<code>Scan complete. Found N results.</code> You can then
proceed to the next step.</p>
<p>Use the command <code>help mycommand</code> to view documentation
for the command &quot;mycommand&quot;.</p>
<p>The telnet client should display: <code>Local Echo is on</code></p>
<p>The operator <code>(#)</code> takes a bit <code>x</code> and a
sequence <code>a</code> and produces a new sequence <code>x # a</code> with
<code>x</code> as the head and <code>a</code> as the tail (very much like the
built-in operation <code>(:)</code> for lists):</p>
